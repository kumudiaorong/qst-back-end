cmake_minimum_required(VERSION 3.14)

project(qst-core LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

get_filename_component(qst_proto "./protos/qst.proto" ABSOLUTE)
get_filename_component(qst_proto_path "${qst_proto}" PATH)

set(CMAKE_PREFIX_PATH "/home/kmdr/tools/Qt/6.2.4/gcc_64" ${CMAKE_PREFIX_PATH})

set(_PROTOBUF_PROTOC protoc)
set(_GRPC_GRPCPP grpc++)
set(_PROTOBUF_LIBPROTOBUF protobuf::libprotobuf)
set(_REFLECTION gRPC::grpc++_reflection)
find_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)

# Generated sources
set(qst_proto_srcs "${CMAKE_CURRENT_SOURCE_DIR}/comm/qst.pb.cc")
set(qst_proto_hdrs "${CMAKE_CURRENT_SOURCE_DIR}/comm/qst.pb.h")
set(qst_grpc_srcs "${CMAKE_CURRENT_SOURCE_DIR}/comm/qst.grpc.pb.cc")
set(qst_grpc_hdrs "${CMAKE_CURRENT_SOURCE_DIR}/comm/qst.grpc.pb.h")

add_custom_command(
  OUTPUT "${qst_proto_srcs}" "${qst_proto_hdrs}" "${qst_grpc_srcs}" "${qst_grpc_hdrs}"
  COMMAND ${_PROTOBUF_PROTOC}
  ARGS --grpc_out "${CMAKE_CURRENT_SOURCE_DIR}/comm"
  --cpp_out "${CMAKE_CURRENT_SOURCE_DIR}/comm"
  -I "${qst_proto_path}"
  --plugin=protoc-gen-grpc="${_GRPC_CPP_PLUGIN_EXECUTABLE}"
  "${qst_proto}"
  DEPENDS "${qst_proto}")
message(STATUS "Current source dir: ${qst_proto}")

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core)

# find_package(protobuf REQUIRED)

# SET(PROTOBUF_INCLUDE_DIR, "/usr/local/include")
include_directories(".")

find_package(Protobuf CONFIG REQUIRED)
find_package(gRPC CONFIG REQUIRED)

add_library(helper
  ${qst_grpc_srcs}
  ${qst_grpc_hdrs}
  ${qst_proto_srcs}
  ${qst_proto_hdrs})

add_executable(qst-core
  qst_core.cpp
  ./help/helper.cpp
)
target_link_libraries(qst-core
  helper
  Qt${QT_VERSION_MAJOR}::Core
  ${_REFLECTION}
  ${_GRPC_GRPCPP}
  ${_PROTOBUF_LIBPROTOBUF})
add_executable(client
  client.cpp)

target_link_libraries(client
  helper
  ${_REFLECTION}
  ${_GRPC_GRPCPP}
  ${_PROTOBUF_LIBPROTOBUF})

# foreach(_target
# qst-core client)
# add_executable(${_target}
# "${_target}.cpp")
# target_link_libraries(${_target}
# qst_grpc_proto
# Qt${QT_VERSION_MAJOR}::Core
# ${_REFLECTION}
# ${_GRPC_GRPCPP}
# ${_PROTOBUF_LIBPROTOBUF})
# endforeach()
install(TARGETS qst-core
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)